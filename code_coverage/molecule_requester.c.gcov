        -:    0:Source:molecule_requester.c
        -:    0:Graph:molecule_requester.gcno
        -:    0:Data:molecule_requester.gcda
        -:    0:Runs:17
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <unistd.h>
        -:    5:#include <netdb.h>
        -:    6:#include <arpa/inet.h>
        -:    7:#include <sys/un.h>
        -:    8:#include <sys/socket.h>
        -:    9:#include <stdbool.h>
        -:   10:
        -:   11:#define BUFFER_SIZE 1024
        -:   12:
        -:   13:// Global variables for command line options
        -:   14:extern int optopt;
        -:   15:extern char *optarg;
        -:   16:
       17:   17:int main(int argc, char *argv[]) {
       17:   18:    const char *hostname = NULL;
       17:   19:    const char *port = NULL;
       17:   20:    char *uds_path = NULL;
       17:   21:    bool seen_flags[256] = { false }; // Track seen flags to avoid duplicates
        -:   22:
       19:   23:    while (1) {
       36:   24:        int ret = getopt(argc, argv, "h:p:f:");
        -:   25:
       36:   26:        if (ret == -1)
        -:   27:        {
       12:   28:            break;
        -:   29:        }
        -:   30:
       24:   31:        if (seen_flags[ret])
        -:   32:        {
        3:   33:            fprintf(stderr, "Error: Duplicate flag -%c\n", ret);
        3:   34:            exit(EXIT_FAILURE);
        -:   35:        }
        -:   36:        
       21:   37:        seen_flags[ret] = true; // Mark this flag as seen
        -:   38:
       21:   39:        switch (ret) {
        6:   40:            case 'h':
        6:   41:                hostname = optarg;
        6:   42:                break;
        6:   43:            case 'p':
        6:   44:                port = optarg;
        6:   45:                break;
        7:   46:            case 'f':
        7:   47:                uds_path = strdup(optarg); // Duplicate the string so it can be used after optarg is modified
        -:   48:                // Append .socket if not already present
        7:   49:                if (!strstr(uds_path, ".socket")) {
        7:   50:                    char *new_path = malloc(strlen(uds_path) + 8); // +8 for ".socket\0"
        7:   51:                    if (new_path) {
        7:   52:                        sprintf(new_path, "%s.socket", uds_path);
        7:   53:                        free(uds_path);
        7:   54:                        uds_path = new_path;
        -:   55:                    }
        -:   56:                }
        7:   57:                break;
        2:   58:            case '?':
        2:   59:                printf("Usage: %s [-h <hostname/IP> -p <port>] | [-f <uds_path>]\n", argv[0]);
        2:   60:                exit(EXIT_FAILURE);
        -:   61:        }
        -:   62:    }
        -:   63:
       12:   64:    if ((uds_path && (hostname || port)) || (!uds_path && (!hostname || !port))) {
        4:   65:        fprintf(stderr, "Error: Provide either -f <uds_path> or both -h <hostname> and -p <port>\n");
        4:   66:        exit(EXIT_FAILURE);
        -:   67:    }
        -:   68:
        8:   69:    int sockfd = -1;
        -:   70:    struct sockaddr_storage addr;
        8:   71:    socklen_t addr_len = 0;
        -:   72:
        8:   73:    if (hostname && port) {
        3:   74:        struct addrinfo hints = {0};
        -:   75:        struct addrinfo *res;
        3:   76:        hints.ai_family = AF_INET;
        3:   77:        hints.ai_socktype = SOCK_DGRAM;
        3:   78:        int status = getaddrinfo(hostname, port, &hints, &res);
        3:   79:        if (status != 0) {
        1:   80:            fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(status));
        1:   81:            return EXIT_FAILURE;
        -:   82:        }
        2:   83:        sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
        2:   84:        if (sockfd < 0) {
    #####:   85:            perror("UDP socket");
    #####:   86:            freeaddrinfo(res);
    #####:   87:            return EXIT_FAILURE;
        -:   88:        }
        2:   89:        memcpy(&addr, res->ai_addr, res->ai_addrlen);
        2:   90:        addr_len = res->ai_addrlen;
        2:   91:        freeaddrinfo(res);
        2:   92:        printf("Connected to drinks_bar server at %s:%s (UDP)\n", hostname, port);
        -:   93:    }
        -:   94:
        7:   95:    if (uds_path) {
        -:   96:        // Check if the server socket exists
        5:   97:        if (access(uds_path, F_OK) != 0) {
        2:   98:            fprintf(stderr, "Error: Server socket '%s' does not exist\n", uds_path);
        2:   99:            exit(EXIT_FAILURE);
        -:  100:        }
        -:  101:
        3:  102:        sockfd = socket(AF_UNIX, SOCK_DGRAM, 0);
        -:  103:        
        3:  104:        if (sockfd < 0) {
    #####:  105:            perror("UDS socket");
    #####:  106:            exit(EXIT_FAILURE);
        -:  107:        }
        -:  108:
        -:  109:        // Create a client-side socket path for responses
        -:  110:        char client_path[108];
        3:  111:        snprintf(client_path, sizeof(client_path), "molecule_client_%d.socket", getpid());
        3:  112:        unlink(client_path); // Remove socket if it exists
        -:  113:        
        -:  114:        // Bind client socket to its own path
        -:  115:        struct sockaddr_un client_addr;
        3:  116:        memset(&client_addr, 0, sizeof(client_addr));
        3:  117:        client_addr.sun_family = AF_UNIX;
        3:  118:        strncpy(client_addr.sun_path, client_path, sizeof(client_addr.sun_path) - 1);
        -:  119:        
        3:  120:        if (bind(sockfd, (struct sockaddr*)&client_addr, sizeof(client_addr)) < 0) {
    #####:  121:            perror("bind");
    #####:  122:            close(sockfd);
    #####:  123:            exit(EXIT_FAILURE);
        -:  124:        }
        -:  125:        
        -:  126:        // Set up server address (this part is the same as your original code)
        3:  127:        struct sockaddr_un *uds_addr = (struct sockaddr_un *)&addr;
        3:  128:        memset(uds_addr, 0, sizeof(struct sockaddr_un));
        3:  129:        uds_addr->sun_family = AF_UNIX;
        3:  130:        strncpy(uds_addr->sun_path, uds_path, sizeof(uds_addr->sun_path) - 1);
        3:  131:        addr_len = sizeof(struct sockaddr_un);
        3:  132:        printf("Connected to drinks_bar server via Unix socket: %s\n", uds_path);
        -:  133:    }
        -:  134:    
        -:  135:    char message[BUFFER_SIZE]; // Buffer to hold the message to send
        -:  136:
        -:  137:    // Main loop to read commands from the user
       23:  138:    while (1) {
       28:  139:        printf("Enter a command (e.g., DELIVER WATER 3) or type \"q\" to quit:\n> ");
        -:  140:        
      28*:  141:        if (!fgets(message, BUFFER_SIZE, stdin)) break; // Read user input (break on EOF)
        -:  142:
        -:  143:        // Remove newline
       28:  144:        size_t len = strlen(message);
       28:  145:        if (len > 0 && message[len - 1] == '\n') message[len - 1] = '\0';
       28:  146:        if (strcasecmp(message, "q") == 0) break; // Exit if the user types "q"
        -:  147:
        -:  148:        // Send the message and receive response
      23*:  149:        if (sendto(sockfd, message, strlen(message), 0, (struct sockaddr*)&addr, addr_len) < 0) {
    #####:  150:            perror("sendto");
    #####:  151:            continue;
        -:  152:        }
        -:  153:
        -:  154:        else {
        -:  155:            // Receive response from server
       23:  156:            char response[BUFFER_SIZE] = {0}; // Buffer to hold the response
        -:  157:            struct sockaddr_storage source_addr;
       23:  158:            socklen_t source_len = sizeof(source_addr);
        -:  159:
       23:  160:            int bytes_received = recvfrom(sockfd, response, BUFFER_SIZE - 1, 0, (struct sockaddr*)&source_addr, &source_len);
        -:  161:            
        -:  162:            // Check if the response was received successfully
       23:  163:            if (bytes_received > 0) {
       23:  164:                response[bytes_received] = '\0';
       23:  165:                printf("Server response: %s\n", response);
        -:  166:            }
        -:  167:        }
        -:  168:    }
        -:  169:
        -:  170:    // Clean up: close the socket and unlink the UDS path if necessary
        5:  171:    if (uds_path) {
        -:  172:        // Get the bound path and unlink it
        -:  173:        struct sockaddr_un addr;
        3:  174:        socklen_t len = sizeof(addr);
        3:  175:        if (getsockname(sockfd, (struct sockaddr*)&addr, &len) == 0) {
        3:  176:            unlink(addr.sun_path);
        -:  177:        }
        -:  178:    }
        -:  179:
        5:  180:    printf("Closing connection to server.\n");
        5:  181:    close(sockfd); // Close the socket
        5:  182:    return 0;
        -:  183:}
